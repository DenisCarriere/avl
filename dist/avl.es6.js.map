{"version":3,"file":"avl.es6.js","sources":["../src/utils.js","../src/index.js"],"sourcesContent":["\nexport function print(root, printNode = (n) => n.key) {\n  var out = [];\n  row(root, '', true, (v) => out.push(v), printNode);\n  return out.join('');\n}\n\nfunction row(root, prefix, isTail, out, printNode) {\n  if (root) {\n    out(`${ prefix }${ isTail ? '└── ' : '├── ' }${ printNode(root) }\\n`);\n    const indent = prefix + (isTail ? '    ' : '│   ');\n    if (root.left)  row(root.left,  indent, false, out, printNode);\n    if (root.right) row(root.right, indent, true,  out, printNode);\n  }\n}\n\n\nexport function isBalanced(root) {\n  // If node is empty then return true\n  if (root === null) return true;\n\n  // Get the height of left and right sub trees\n  var lh = height(root.left);\n  var rh = height(root.right);\n\n  if (Math.abs(lh - rh) <= 1 &&\n      isBalanced(root.left)  &&\n      isBalanced(root.right)) return true;\n\n  // If we reach here then tree is not height-balanced\n  return false;\n}\n\n/**\n * The function Compute the 'height' of a tree.\n * Height is the number of nodes along the longest path\n * from the root node down to the farthest leaf node.\n *\n * @param  {Node} node\n * @return {Number}\n */\nfunction height(node) {\n  return node ? (1 + Math.max(height(node.left), height(node.right))) : 0;\n}\n","import { print, isBalanced } from './utils';\n\n\n// function createNode (parent, left, right, height, key, data) {\n//   return { parent, left, right, balanceFactor: height, key, data };\n// }\n\n\nfunction DEFAULT_COMPARE (a, b) { return a > b ? 1 : a < b ? -1 : 0; }\n\n\nfunction rotateLeft (node) {\n  var rightNode = node.right;\n  node.right    = rightNode.left;\n\n  if (rightNode.left) rightNode.left.parent = node;\n\n  rightNode.parent = node.parent;\n  if (rightNode.parent) {\n    if (rightNode.parent.left === node) {\n      rightNode.parent.left = rightNode;\n    } else {\n      rightNode.parent.right = rightNode;\n    }\n  }\n\n  node.parent    = rightNode;\n  rightNode.left = node;\n\n  node.balanceFactor += 1;\n  if (rightNode.balanceFactor < 0) {\n    node.balanceFactor -= rightNode.balanceFactor;\n  }\n\n  rightNode.balanceFactor += 1;\n  if (node.balanceFactor > 0) {\n    rightNode.balanceFactor += node.balanceFactor;\n  }\n  return rightNode;\n}\n\n\nfunction rotateRight (node) {\n  var leftNode = node.left;\n  node.left = leftNode.right;\n  if (node.left) node.left.parent = node;\n\n  leftNode.parent = node.parent;\n  if (leftNode.parent) {\n    if (leftNode.parent.left === node) {\n      leftNode.parent.left = leftNode;\n    } else {\n      leftNode.parent.right = leftNode;\n    }\n  }\n\n  node.parent    = leftNode;\n  leftNode.right = node;\n\n  node.balanceFactor -= 1;\n  if (leftNode.balanceFactor > 0) {\n    node.balanceFactor -= leftNode.balanceFactor;\n  }\n\n  leftNode.balanceFactor -= 1;\n  if (node.balanceFactor < 0) {\n    leftNode.balanceFactor += node.balanceFactor;\n  }\n\n  return leftNode;\n}\n\n\n// function leftBalance (node) {\n//   if (node.left.balanceFactor === -1) rotateLeft(node.left);\n//   return rotateRight(node);\n// }\n\n\n// function rightBalance (node) {\n//   if (node.right.balanceFactor === 1) rotateRight(node.right);\n//   return rotateLeft(node);\n// }\n\n\nexport default class Tree {\n\n  constructor (comparator) {\n    this._comparator = comparator || DEFAULT_COMPARE;\n    this._root = null;\n    this._size = 0;\n  }\n\n\n  destroy() {\n    this._root = null;\n  }\n\n  get size () {\n    return this._size;\n  }\n\n\n  contains (key) {\n    if (this._root)  {\n      var node       = this._root;\n      var comparator = this._comparator;\n      while (node)  {\n        var cmp = comparator(key, node.key);\n        if      (cmp === 0)     return true;\n        else if (cmp === -1) node = node.left;\n        else                    node = node.right;\n      }\n    }\n    return false;\n  }\n\n\n  /* eslint-disable class-methods-use-this */\n  next (node) {\n    var sucessor = node.right;\n    while (sucessor && sucessor.left) sucessor = sucessor.left;\n    return sucessor;\n  }\n\n\n  prev (node) {\n    var predecessor = node.left;\n    while (predecessor && predecessor.right) predecessor = predecessor.right;\n    return predecessor;\n  }\n  /* eslint-enable class-methods-use-this */\n\n\n  forEach(fn) {\n    var current = this._root;\n    var s = [], done = false, i = 0;\n\n    while (!done) {\n      // Reach the left most Node of the current Node\n      if (current) {\n        // Place pointer to a tree node on the stack\n        // before traversing the node's left subtree\n        s.push(current);\n        current = current.left;\n      } else {\n        // BackTrack from the empty subtree and visit the Node\n        // at the top of the stack; however, if the stack is\n        // empty you are done\n        if (s.length > 0) {\n          current = s.pop();\n          fn(current, i++);\n\n          // We have visited the node and its left\n          // subtree. Now, it's right subtree's turn\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return this;\n  }\n\n\n  keys () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.key);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  values () {\n    var current = this._root;\n    var s = [], r = [], done = false;\n\n    while (!done) {\n      if (current) {\n        s.push(current);\n        current = current.left;\n      } else {\n        if (s.length > 0) {\n          current = s.pop();\n          r.push(current.data);\n          current = current.right;\n        } else done = true;\n      }\n    }\n    return r;\n  }\n\n\n  minNode () {\n    var node = this._root;\n    while (node && node.left) node = node.left;\n    return node;\n  }\n\n\n  maxNode () {\n    var node = this._root;\n    while (node && node.right) node = node.right;\n    return node;\n  }\n\n\n  min () {\n    return this.minNode().key;\n  }\n\n\n  max() {\n    return this.maxNode().key;\n  }\n\n\n  isEmpty() {\n    return !this._root;\n  }\n\n\n  pop () {\n    var node = this._root;\n    while (node.left) node = node.left;\n    var returnValue = { key: node.key, data: node.data };\n    this.remove(node.key);\n    return returnValue;\n  }\n\n\n  find (key) {\n    var root = this._root;\n    if (root === null)    return null;\n    if (key === root.key) return root;\n\n    var subtree = root, cmp;\n    var compare = this._comparator;\n    while (subtree) {\n      cmp = compare(key, subtree.key);\n      if      (cmp === 0) return subtree;\n      else if (cmp < 0)   subtree = subtree.left;\n      else                subtree = subtree.right;\n    }\n\n    return null;\n  }\n\n\n  insert (key, data) {\n    // if (this.contains(key)) return null;\n\n    if (!this._root) {\n      this._root = {\n        parent: null, left: null, right: null, balanceFactor: 0,\n        key, data\n      };\n      this._size++;\n      return this._root;\n    }\n\n    var compare = this._comparator;\n    var node    = this._root;\n    var parent  = null;\n    var cmp     = 0;\n\n    while (node) {\n      cmp = compare(key, node.key);\n      parent = node;\n      if      (cmp === 0) return null;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n\n    var newNode = {\n      left: null, right: null, balanceFactor: 0,\n      parent, key, data,\n    };\n    if (cmp < 0) parent.left  = newNode;\n    else         parent.right = newNode;\n\n    while (parent) {\n      if (compare(parent.key, key) < 0) parent.balanceFactor -= 1;\n      else                              parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor === 0) break;\n      else if   (parent.balanceFactor < -1) {\n        //let newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        let newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      } else if (parent.balanceFactor > 1) {\n        // let newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        let newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        break;\n      }\n      parent = parent.parent;\n    }\n\n    this._size++;\n    return newNode;\n  }\n\n\n  remove (key) {\n    if (!this._root) return null;\n\n    // if (!this.contains(key)) return null;\n\n    var node = this._root;\n    var compare = this._comparator;\n\n    while (node) {\n      var cmp = compare(key, node.key);\n      if      (cmp === 0) break;\n      else if (cmp < 0)   node = node.left;\n      else                node = node.right;\n    }\n    if (!node) return null;\n    var returnValue = node.key;\n\n    if (node.left) {\n      var max = node.left;\n\n      while (max.left || max.right) {\n        while (max.right) max = max.right;\n\n        node.key = max.key;\n        node.data = max.data;\n        if (max.left) {\n          node = max;\n          max = max.left;\n        }\n      }\n\n      node.key  = max.key;\n      node.data = max.data;\n      node = max;\n    }\n\n    if (node.right) {\n      var min = node.right;\n\n      while (min.left || min.right) {\n        while (min.left) min = min.left;\n\n        node.key  = min.key;\n        node.data = min.data;\n        if (min.right) {\n          node = min;\n          min = min.right;\n        }\n      }\n\n      node.key  = min.key;\n      node.data = min.data;\n      node = min;\n    }\n\n    var parent = node.parent;\n    var pp     = node;\n\n    while (parent) {\n      if (parent.left === pp) parent.balanceFactor -= 1;\n      else                    parent.balanceFactor += 1;\n\n      if        (parent.balanceFactor < -1) {\n        //let newRoot = rightBalance(parent);\n        if (parent.right.balanceFactor === 1) rotateRight(parent.right);\n        let newRoot = rotateLeft(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      } else if (parent.balanceFactor > 1) {\n        // let newRoot = leftBalance(parent);\n        if (parent.left.balanceFactor === -1) rotateLeft(parent.left);\n        let newRoot = rotateRight(parent);\n\n        if (parent === this._root) this._root = newRoot;\n        parent = newRoot;\n      }\n\n      if (parent.balanceFactor === -1 || parent.balanceFactor === 1) break;\n\n      pp     = parent;\n      parent = parent.parent;\n    }\n\n    if (node.parent) {\n      if (node.parent.left === node) node.parent.left  = null;\n      else                           node.parent.right = null;\n    }\n\n    if (node === this._root) this._root = null;\n\n    this._size--;\n    return returnValue;\n  }\n\n\n  isBalanced() {\n    return isBalanced(this._root);\n  }\n\n\n  toString (printNode) {\n    return print(this._root, printNode);\n  }\n\n}\n\n"],"names":[],"mappings":"AACO,SAAS,KAAK,CAAC,IAAI,EAAE,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE;EACpD,IAAI,GAAG,GAAG,EAAE,CAAC;EACb,GAAG,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;EACnD,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;CACrB;;AAED,SAAS,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE;EACjD,IAAI,IAAI,EAAE;IACR,GAAG,CAAC,CAAC,GAAG,MAAM,EAAE,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,EAAE,GAAG,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACtE,MAAM,MAAM,GAAG,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC,CAAC;IACnD,IAAI,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,MAAM,EAAE,KAAK,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;IAC/D,IAAI,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,IAAI,GAAG,GAAG,EAAE,SAAS,CAAC,CAAC;GAChE;CACF;;;AAGD,AAAO,SAAS,UAAU,CAAC,IAAI,EAAE;;EAE/B,IAAI,IAAI,KAAK,IAAI,EAAE,OAAO,IAAI,CAAC;;;EAG/B,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC3B,IAAI,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;;EAE5B,IAAI,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC;MACtB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC;MACrB,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;;;EAGxC,OAAO,KAAK,CAAC;CACd;;;;;;;;;;AAUD,SAAS,MAAM,CAAC,IAAI,EAAE;EACpB,OAAO,IAAI,IAAI,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC;CACzE;;ACxCD;;;;;AAKA,SAAS,eAAe,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;;;AAGtE,SAAS,UAAU,EAAE,IAAI,EAAE;EACzB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;EAC3B,IAAI,CAAC,KAAK,MAAM,SAAS,CAAC,IAAI,CAAC;;EAE/B,IAAI,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;EAEjD,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EAC/B,IAAI,SAAS,CAAC,MAAM,EAAE;IACpB,IAAI,SAAS,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;MAClC,SAAS,CAAC,MAAM,CAAC,IAAI,GAAG,SAAS,CAAC;KACnC,MAAM;MACL,SAAS,CAAC,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;KACpC;GACF;;EAED,IAAI,CAAC,MAAM,MAAM,SAAS,CAAC;EAC3B,SAAS,CAAC,IAAI,GAAG,IAAI,CAAC;;EAEtB,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;EACxB,IAAI,SAAS,CAAC,aAAa,GAAG,CAAC,EAAE;IAC/B,IAAI,CAAC,aAAa,IAAI,SAAS,CAAC,aAAa,CAAC;GAC/C;;EAED,SAAS,CAAC,aAAa,IAAI,CAAC,CAAC;EAC7B,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;IAC1B,SAAS,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;GAC/C;EACD,OAAO,SAAS,CAAC;CAClB;;;AAGD,SAAS,WAAW,EAAE,IAAI,EAAE;EAC1B,IAAI,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC;EACzB,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;EAC3B,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;EAEvC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;EAC9B,IAAI,QAAQ,CAAC,MAAM,EAAE;IACnB,IAAI,QAAQ,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE;MACjC,QAAQ,CAAC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;KACjC,MAAM;MACL,QAAQ,CAAC,MAAM,CAAC,KAAK,GAAG,QAAQ,CAAC;KAClC;GACF;;EAED,IAAI,CAAC,MAAM,MAAM,QAAQ,CAAC;EAC1B,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;;EAEtB,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC;EACxB,IAAI,QAAQ,CAAC,aAAa,GAAG,CAAC,EAAE;IAC9B,IAAI,CAAC,aAAa,IAAI,QAAQ,CAAC,aAAa,CAAC;GAC9C;;EAED,QAAQ,CAAC,aAAa,IAAI,CAAC,CAAC;EAC5B,IAAI,IAAI,CAAC,aAAa,GAAG,CAAC,EAAE;IAC1B,QAAQ,CAAC,aAAa,IAAI,IAAI,CAAC,aAAa,CAAC;GAC9C;;EAED,OAAO,QAAQ,CAAC;CACjB;;;;;;;;;;;;;;;AAeD,AAAe,MAAM,IAAI,CAAC;;EAExB,WAAW,CAAC,CAAC,UAAU,EAAE;IACvB,IAAI,CAAC,WAAW,GAAG,UAAU,IAAI,eAAe,CAAC;IACjD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IAClB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;GAChB;;;EAGD,OAAO,GAAG;IACR,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;GACnB;;EAED,IAAI,IAAI,CAAC,GAAG;IACV,OAAO,IAAI,CAAC,KAAK,CAAC;GACnB;;;EAGD,QAAQ,CAAC,CAAC,GAAG,EAAE;IACb,IAAI,IAAI,CAAC,KAAK,GAAG;MACf,IAAI,IAAI,SAAS,IAAI,CAAC,KAAK,CAAC;MAC5B,IAAI,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;MAClC,OAAO,IAAI,GAAG;QACZ,IAAI,GAAG,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACpC,SAAS,GAAG,KAAK,CAAC,MAAM,OAAO,IAAI,CAAC;aAC/B,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;gCACd,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;OAC3C;KACF;IACD,OAAO,KAAK,CAAC;GACd;;;;EAID,IAAI,CAAC,CAAC,IAAI,EAAE;IACV,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;IAC1B,OAAO,QAAQ,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;IAC3D,OAAO,QAAQ,CAAC;GACjB;;;EAGD,IAAI,CAAC,CAAC,IAAI,EAAE;IACV,IAAI,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC;IAC5B,OAAO,WAAW,IAAI,WAAW,CAAC,KAAK,EAAE,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC;IACzE,OAAO,WAAW,CAAC;GACpB;;;;EAID,OAAO,CAAC,EAAE,EAAE;IACV,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,EAAE,CAAC,GAAG,CAAC,CAAC;;IAEhC,OAAO,CAAC,IAAI,EAAE;;MAEZ,IAAI,OAAO,EAAE;;;QAGX,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;OACxB,MAAM;;;;QAIL,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;UAChB,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;UAClB,EAAE,CAAC,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;;;;UAIjB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;SACzB,MAAM,IAAI,GAAG,IAAI,CAAC;OACpB;KACF;IACD,OAAO,IAAI,CAAC;GACb;;;EAGD,IAAI,CAAC,GAAG;IACN,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC;;IAEjC,OAAO,CAAC,IAAI,EAAE;MACZ,IAAI,OAAO,EAAE;QACX,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;OACxB,MAAM;QACL,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;UAChB,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;UAClB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;UACpB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;SACzB,MAAM,IAAI,GAAG,IAAI,CAAC;OACpB;KACF;IACD,OAAO,CAAC,CAAC;GACV;;;EAGD,MAAM,CAAC,GAAG;IACR,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,GAAG,KAAK,CAAC;;IAEjC,OAAO,CAAC,IAAI,EAAE;MACZ,IAAI,OAAO,EAAE;QACX,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAChB,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;OACxB,MAAM;QACL,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;UAChB,OAAO,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;UAClB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;UACrB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;SACzB,MAAM,IAAI,GAAG,IAAI,CAAC;OACpB;KACF;IACD,OAAO,CAAC,CAAC;GACV;;;EAGD,OAAO,CAAC,GAAG;IACT,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,OAAO,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IAC3C,OAAO,IAAI,CAAC;GACb;;;EAGD,OAAO,CAAC,GAAG;IACT,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,OAAO,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IAC7C,OAAO,IAAI,CAAC;GACb;;;EAGD,GAAG,CAAC,GAAG;IACL,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;GAC3B;;;EAGD,GAAG,GAAG;IACJ,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,GAAG,CAAC;GAC3B;;;EAGD,OAAO,GAAG;IACR,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC;GACpB;;;EAGD,GAAG,CAAC,GAAG;IACL,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,OAAO,IAAI,CAAC,IAAI,EAAE,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;IACnC,IAAI,WAAW,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;IACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACtB,OAAO,WAAW,CAAC;GACpB;;;EAGD,IAAI,CAAC,CAAC,GAAG,EAAE;IACT,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,IAAI,IAAI,KAAK,IAAI,KAAK,OAAO,IAAI,CAAC;IAClC,IAAI,GAAG,KAAK,IAAI,CAAC,GAAG,EAAE,OAAO,IAAI,CAAC;;IAElC,IAAI,OAAO,GAAG,IAAI,EAAE,GAAG,CAAC;IACxB,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IAC/B,OAAO,OAAO,EAAE;MACd,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;MAChC,SAAS,GAAG,KAAK,CAAC,EAAE,OAAO,OAAO,CAAC;WAC9B,IAAI,GAAG,GAAG,CAAC,IAAI,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC;0BACvB,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;KAC7C;;IAED,OAAO,IAAI,CAAC;GACb;;;EAGD,MAAM,CAAC,CAAC,GAAG,EAAE,IAAI,EAAE;;;IAGjB,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;MACf,IAAI,CAAC,KAAK,GAAG;QACX,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;QACvD,GAAG,EAAE,IAAI;OACV,CAAC;MACF,IAAI,CAAC,KAAK,EAAE,CAAC;MACb,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;IAED,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;IAC/B,IAAI,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC;IACzB,IAAI,MAAM,IAAI,IAAI,CAAC;IACnB,IAAI,GAAG,OAAO,CAAC,CAAC;;IAEhB,OAAO,IAAI,EAAE;MACX,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;MAC7B,MAAM,GAAG,IAAI,CAAC;MACd,SAAS,GAAG,KAAK,CAAC,EAAE,OAAO,IAAI,CAAC;WAC3B,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;0BACjB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;KACvC;;IAED,IAAI,OAAO,GAAG;MACZ,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC;MACzC,MAAM,EAAE,GAAG,EAAE,IAAI;KAClB,CAAC;IACF,IAAI,GAAG,GAAG,CAAC,EAAE,MAAM,CAAC,IAAI,IAAI,OAAO,CAAC;iBACvB,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC;;IAEpC,OAAO,MAAM,EAAE;MACb,IAAI,OAAO,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;wCAC1B,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;;MAE5D,WAAW,MAAM,CAAC,aAAa,KAAK,CAAC,EAAE,MAAM;WACxC,MAAM,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE;;QAEpC,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;QAEjC,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QAChD,MAAM;OACP,MAAM,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;;QAEnC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9D,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;;QAElC,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QAChD,MAAM;OACP;MACD,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KACxB;;IAED,IAAI,CAAC,KAAK,EAAE,CAAC;IACb,OAAO,OAAO,CAAC;GAChB;;;EAGD,MAAM,CAAC,CAAC,GAAG,EAAE;IACX,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,IAAI,CAAC;;;;IAI7B,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;IACtB,IAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC;;IAE/B,OAAO,IAAI,EAAE;MACX,IAAI,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;MACjC,SAAS,GAAG,KAAK,CAAC,EAAE,MAAM;WACrB,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;0BACjB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC;KACvC;IACD,IAAI,CAAC,IAAI,EAAE,OAAO,IAAI,CAAC;IACvB,IAAI,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC;;IAE3B,IAAI,IAAI,CAAC,IAAI,EAAE;MACb,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;MAEpB,OAAO,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE;QAC5B,OAAO,GAAG,CAAC,KAAK,EAAE,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;;QAElC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrB,IAAI,GAAG,CAAC,IAAI,EAAE;UACZ,IAAI,GAAG,GAAG,CAAC;UACX,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;SAChB;OACF;;MAED,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;MACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;MACrB,IAAI,GAAG,GAAG,CAAC;KACZ;;IAED,IAAI,IAAI,CAAC,KAAK,EAAE;MACd,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC;;MAErB,OAAO,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,KAAK,EAAE;QAC5B,OAAO,GAAG,CAAC,IAAI,EAAE,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC;;QAEhC,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;QACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;QACrB,IAAI,GAAG,CAAC,KAAK,EAAE;UACb,IAAI,GAAG,GAAG,CAAC;UACX,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC;SACjB;OACF;;MAED,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC;MACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;MACrB,IAAI,GAAG,GAAG,CAAC;KACZ;;IAED,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;IACzB,IAAI,EAAE,OAAO,IAAI,CAAC;;IAElB,OAAO,MAAM,EAAE;MACb,IAAI,MAAM,CAAC,IAAI,KAAK,EAAE,EAAE,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;8BAC1B,MAAM,CAAC,aAAa,IAAI,CAAC,CAAC;;MAElD,WAAW,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,EAAE;;QAEpC,IAAI,MAAM,CAAC,KAAK,CAAC,aAAa,KAAK,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAChE,IAAI,OAAO,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;;QAEjC,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QAChD,MAAM,GAAG,OAAO,CAAC;OAClB,MAAM,IAAI,MAAM,CAAC,aAAa,GAAG,CAAC,EAAE;;QAEnC,IAAI,MAAM,CAAC,IAAI,CAAC,aAAa,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC9D,IAAI,OAAO,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC;;QAElC,IAAI,MAAM,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;QAChD,MAAM,GAAG,OAAO,CAAC;OAClB;;MAED,IAAI,MAAM,CAAC,aAAa,KAAK,CAAC,CAAC,IAAI,MAAM,CAAC,aAAa,KAAK,CAAC,EAAE,MAAM;;MAErE,EAAE,OAAO,MAAM,CAAC;MAChB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;KACxB;;IAED,IAAI,IAAI,CAAC,MAAM,EAAE;MACf,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAAC;qCACzB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC;KACzD;;IAED,IAAI,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;;IAE3C,IAAI,CAAC,KAAK,EAAE,CAAC;IACb,OAAO,WAAW,CAAC;GACpB;;;EAGD,UAAU,GAAG;IACX,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;GAC/B;;;EAGD,QAAQ,CAAC,CAAC,SAAS,EAAE;IACnB,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;GACrC;;CAEF;;;;"}